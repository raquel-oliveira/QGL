package fr.unice.polytech.qgl.qab.strategy.ground.states;

import fr.unice.polytech.qgl.qab.actions.Action;
import fr.unice.polytech.qgl.qab.actions.simple.ground.Exploit;
import fr.unice.polytech.qgl.qab.exception.action.IndexOutOfBoundsComboAction;
import fr.unice.polytech.qgl.qab.exception.map.PositionOutOfMapRange;
import fr.unice.polytech.qgl.qab.map.Map;
import fr.unice.polytech.qgl.qab.resources.primary.PrimaryResource;
import fr.unice.polytech.qgl.qab.strategy.context.Context;
import fr.unice.polytech.qgl.qab.strategy.ground.factory.GroundStateFactory;
import fr.unice.polytech.qgl.qab.strategy.ground.factory.GroundStateType;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * @version 23/02/16.
 */
public class ExploitTile extends GroundState {
    private static final Logger LOGGER = LogManager.getLogger(ExploitTile.class);

    @Override
    public GroundState getState(Context context, Map map) throws PositionOutOfMapRange {
        if(context.current().getResourcesToExploit().isEmpty()){
            if(context.getContracts().enoughToTransform()){
                LOGGER.info("Vai tranforme");
                return GroundStateFactory.buildState(GroundStateType.TRANSFORM);
            }else{
                LOGGER.info("Vai scout");
                return GroundStateFactory.buildState(GroundStateType.SCOUT_TILE);
            }
        } else
            LOGGER.info("Vai exploit");
        return GroundStateFactory.buildState(GroundStateType.EXPLOIT_TILE);
    }

    @Override
    public Action responseState(Context context, Map map) throws IndexOutOfBoundsComboAction {
        PrimaryResource res = new PrimaryResource(context.current().getResourcesToExploit().get(0));
        context.current().getResourcesToExploit().remove(0);
        Action act = new Exploit(res);
        context.current().setLastAction(act);
        return act;
    }
}
