package fr.unice.polytech.qgl.qab.strategy.ground.states;

import fr.unice.polytech.qgl.qab.actions.Action;
import fr.unice.polytech.qgl.qab.actions.simple.ground.Exploit;
import fr.unice.polytech.qgl.qab.exception.IndexOutOfBoundsComboAction;
import fr.unice.polytech.qgl.qab.exception.PositionOutOfMapRange;
import fr.unice.polytech.qgl.qab.map.Map;
import fr.unice.polytech.qgl.qab.resources.Resource;
import fr.unice.polytech.qgl.qab.resources.primary.PrimaryResource;
import fr.unice.polytech.qgl.qab.strategy.context.Context;

/**
 * @version 23/02/16.
 */
public class ExploitTile extends GroundState {

    /**
     * Method to get the instance of the ExploreTile class
     * @return instance of ExploreTile
     */
    public static ExploitTile getInstance() {
        return new ExploitTile();
    }

    @Override
    public GroundState getState(Context context, Map map) throws PositionOutOfMapRange {
        if (context.current().getResourcesToExploit().isEmpty()) {
            updateContext(context);
            context.current().setIndexTile(0);
            return GlimpseTheGround.getInstance();
        } else
            return ExploitTile.getInstance();
    }

    @Override
    public Action responseState(Context context, Map map) throws IndexOutOfBoundsComboAction {
        Resource res = new PrimaryResource(context.current().getResourcesToExploit().get(0));
        context.current().getResourcesToExploit().remove(0);
        Action act = new Exploit(res);
        context.current().setLastAction(act);
        return act;
    }

    /**
     * Method to updata the context
     * @param context
     */
    private void updateContext(Context context) {
        context.current().setLastAction(null);
        context.current().setComboAction(null);
    }
}
